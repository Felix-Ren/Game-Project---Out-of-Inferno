/** @file mainwindow.cpp
 *  @brief Contains the implementation for the MainWindow class.
 *
 * Contain constructors and destructors of the MainWindow class generated by Qt
 *and implementations of slots functions.
 */

#include "mainwindow.h"
#include "ui_mainwindow.h"

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);

    // Define the pictures for the main window
    background_pic = new QPixmap(":/pic/background_pic2.jpg");
    mute_pic = new QPixmap(":/pic/mute.jpg");


    // Set the pictures to labels and buttons
    ui->background->setPixmap(*background_pic);
    ui->background->setScaledContents(true);

    ui->muteButton->setIcon(*mute_pic);

    // Set the background music
    background_music = new QMediaPlayer;
    background_music->setMedia(QUrl("qrc:/sound/background_music.mp3"));
    background_music->play();

    QObject::connect(ui->instructionButton, SIGNAL(clicked(bool)), this, SLOT(show_instructions()));

//    playMusic();

    // Connect mute icon on the window with mute function
    QObject::connect(ui->muteButton, SIGNAL(clicked(bool)), background_music, SLOT(pause()));

//    timer = new QTimer(this);
//    connect(timer, SIGNAL(timeout()), background_music, SLOT(repeatMusic()));
//    timer->start();

    // Reset level names, number of lives, and number of spells.
    resetLifeSpell();
}

MainWindow::~MainWindow()
{
    delete ui;
}

/** Translate all texts in the main window to English.*/
void MainWindow::translate_to_English(){

    // First check if the language is English.
    ui->gameTitle->setText("Out of Inferno");
    ui->gameTitle->setText("Out of Inferno");
    ui->label->setText("Difficulty");
    ui->instructionButton->setText("Instructions");
    ui->playButton->setText("Play");
//    ui->scoreButton->setText("Highest Scores");
    ui->easyButton->setText("Easy");
    ui->mediumButton->setText("Medium");
    ui->difficultButton->setText("Difficult");
    setWindowTitle("Out of Inferno");
        //isEnglish = 1;
    //}
    return;
}

/** Translate all texts in the main window to Chinese.*/
void MainWindow::translate_to_Chinese(){

    // First check if the language is English.
    //if(isEnglish = 1) {
        setWindowTitle("逃出生天");
        ui->gameTitle->setText("逃出生天");
        ui->label->setText("难度");
        ui->instructionButton->setText("教程");
        ui->playButton->setText("进入");
//        ui->scoreButton->setText("分数");
        ui->easyButton->setText("容易");
        ui->mediumButton->setText("正常");
        ui->difficultButton->setText("困难");

    //}
    return;
}

/** Direct from main menu to stages according to users' choices.
 */
void MainWindow::to_stage(){

    const int easyLife = 9;
    const int mediumLife = 4;
    const int hardLife = 2;

//    PlayerInfo information(""); // Default: set number of life to 15, and number of spell to 0.
    // Set number of lives to different values according to user's choices of difficulty.
    if(ui->easyButton->isChecked() == true) {
        PlayerInfo::numberOfLife = easyLife;
    } else if(ui->mediumButton->isChecked() == true){
        PlayerInfo::numberOfLife = mediumLife;
    } else if(ui->difficultButton->isChecked() == true){
        PlayerInfo::numberOfLife = hardLife;
    } else{ ; }

    Stage* b3 = new Stage();
    b3->setWindowTitle("B3");
    b3->show();
    this->hide();

}

/** Show intructions in a dialog with a OK button to dismiss the dialog.
*/
void MainWindow::show_instructions(){
    InstructionDialog* instru = new InstructionDialog;
    instru->show();
}

///** Play the background music.
// */
//void MainWindow::playMusic(){
//    background_music = new QMediaPlayer;
//    background_music->setMedia(QUrl("qrc:/sound/background_music.mp3"));
//    background_music->play();
//}

///** Turn off the background music
// */
//void MainWindow::mute(){
//    background_music->

//}

///** Repeat the music if it ends.*/
//void MainWindow::repeatMusic(){

//    // Check if the music ends.
//    if(background_music->state() == QMediaPlayer::StoppedState){
//        background_music->play();
//    }
//}


void MainWindow::resetLifeSpell(){
    PlayerInfo::numberOfLife = 15;
    PlayerInfo::numberOfSpell = 0;
}
